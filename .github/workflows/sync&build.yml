name: Build Linux Custom Test Kernel

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *'

permissions:
  contents: write

jobs:
  sync:
    name: Sync latest LTS tag
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get latest upstream tag
        id: latest
        run: |
          tag=$(git ls-remote --tags --refs https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git \
            | grep 'refs/tags/v6\.12\.[0-9]\+$' \
            | sed 's|.*/v||' \
            | sort -V | tail -1)
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Read current version
        id: current
        run: |
          pv=$(grep '^pkgver=' PKGBUILD | cut -d= -f2)
          echo "pkgver=$pv" >> $GITHUB_OUTPUT

      - name: Update PKGBUILD if newer tag exists
        if: ${{ steps.latest.outputs.tag != steps.current.outputs.pkgver }}
        run: |
          sed -i "s/^pkgver=.*/pkgver=${{ steps.latest.outputs.tag }}/" PKGBUILD
          sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD

      - name: Commit sync changes
        if: ${{ steps.latest.outputs.tag != steps.current.outputs.pkgver }}
        uses: EndBug/add-and-commit@v9
        with:
          message: "ci: sync PKGBUILD to ${{ steps.latest.outputs.tag }}"
          add: PKGBUILD

  build:
    name: Build Kernel
    runs-on: ubuntu-latest
    container: archlinux:latest

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel bc cpio gettext git libelf pahole perl python tar xz

      - name: Add builder user
        run: |
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          chown -R builder:builder "${GITHUB_WORKSPACE}"

      - name: Cleanup pacman cache
        run: yes | pacman -Scc

      - name: Build PKGBUILD
        run: |
          sudo -u builder bash -lc "
            mkdir -p ~/build
            cp -r ${GITHUB_WORKSPACE} ~/build/linux-custom-test
            cd ~/build/linux-custom-test
            makepkg -s --noconfirm
            mkdir -p ${GITHUB_WORKSPACE}/artifacts
            cp *.pkg.tar.zst ${GITHUB_WORKSPACE}/artifacts/
          "

      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: kernel-artifacts
          path: artifacts/*.pkg.tar.zst

  bump-version:
    name: Bump pkgrel if rebuild
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Detect new build
        id: bump
        run: |
          pv=$(grep '^pkgver=' PKGBUILD | cut -d= -f2)
          old=$(git show HEAD~1:PKGBUILD | grep '^pkgver=' | cut -d= -f2 || echo "")
          if [[ "$pv" != "$old" ]]; then
            rel=1
          else
            curr=$(grep '^pkgrel=' PKGBUILD | cut -d= -f2)
            rel=$((curr + 1))
          fi
          echo "pkgver=$pv" >> $GITHUB_OUTPUT
          echo "pkgrel=$rel" >> $GITHUB_OUTPUT
          echo "$pv-$rel" > .tag

      - name: Commit bump
        uses: EndBug/add-and-commit@v9
        with:
          message: "ci: bump to ${{ steps.bump.outputs.pkgver }}-${{ steps.bump.outputs.pkgrel }}"
          add: |
            PKGBUILD
            .tag

  release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: bump-version
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: kernel-artifacts
          path: dist

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: linux-custom-test-${{ needs.bump-version.outputs.pkgver }}-${{ needs.bump-version.outputs.pkgrel }}
          name: Linux Custom Test ${{ needs.bump-version.outputs.pkgver }}-r${{ needs.bump-version.outputs.pkgrel }}
          body: |
            Release of linux-custom-test v${{ needs.bump-version.outputs.pkgver }}-r${{ needs.bump-version.outputs.pkgrel }}.
            Use `pacman -U` to install locally.
          files: dist/*.pkg.tar.zst
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
