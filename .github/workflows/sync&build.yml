name: Sync & Build Custom Kernel

on:
  schedule:
    - cron: '0 4 * * *'
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  sync:
    name: Sync LTS 6.12.x
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get latest LTS 6.12.x tag
        id: upstream
        run: |
          latest=$(git ls-remote --tags --refs \
            https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git \
            | grep 'refs/tags/v6\.12\.[0-9]\+$' \
            | awk -F/ '{print $3}' \
            | sed 's/^v//' \
            | sort -V \
            | tail -1)
          echo "upstream=$latest" >> $GITHUB_OUTPUT

      - name: Get current pkgver
        id: current
        run: |
          pv=$(grep '^pkgver=' PKGBUILD | cut -d= -f2)
          echo "current_pkgver=$pv" >> $GITHUB_OUTPUT

      - name: Bump pkgver & reset pkgrel
        if: ${{ steps.upstream.outputs.upstream != steps.current.outputs.current_pkgver }}
        run: |
          sed -i "s/^pkgver=.*/pkgver=${{ steps.upstream.outputs.upstream }}/" PKGBUILD
          sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD

      - name: Commit & push sync
        if: ${{ steps.upstream.outputs.upstream != steps.current.outputs.current_pkgver }}
        uses: EndBug/add-and-commit@v9
        with:
          author_name: "github-actions[bot]"
          author_email: "github-actions[bot]@users.noreply.github.com"
          message: "ci: sync to Linux LTS ${{ steps.upstream.outputs.upstream }}"
          add: PKGBUILD
          push: true

  build:
    name: Build Kernel
    needs: sync
    runs-on: ubuntu-latest
    container: archlinux:latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache pacman packages
        uses: actions/cache@v3
        with:
          path: /var/cache/pacman/pkg
          key:   ${{ runner.os }}-arch-pacman
          restore-keys: |
            ${{ runner.os }}-arch-pacman-

      - name: Install dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel git wget gnupg sudo

      - name: Check disk space before build
        run: df -h

      - name: Cleanup unused files
        run: |
          pacman -Scc --noconfirm || true
          rm -rf ~/.cache ~/.npm ~/.cargo ~/.local/share/Trash || true
          docker system prune -af || true
          df -h

      - name: Add build user and set ownership
        run: |
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          chown -R builder:builder "${GITHUB_WORKSPACE}"

      - name: Build as builder
        run: |
          sudo -u builder bash -lc "
            cd \"${GITHUB_WORKSPACE}\"
            mkdir -p ~/.gnupg artifacts
            echo 'disable-ipv6' >> ~/.gnupg/dirmngr.conf
            echo 'keyserver hkp://keyserver.ubuntu.com' >> ~/.gnupg/gpg.conf
            gpg --batch --recv-keys 38DBBDC86092693E 647F28654894E3BD || true
            cp /etc/makepkg.conf ~/.makepkg.conf
            sed -i 's/^#MAKEFLAGS=.*/MAKEFLAGS=\"-j\$(nproc)\"/' ~/.makepkg.conf
            sed -i 's|^PKGDEST=.*|PKGDEST=\"\$PWD/artifacts\"|' ~/.makepkg.conf
            makepkg -s --noconfirm --config ~/.makepkg.conf
          "

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-build
          path: artifacts/*.pkg.tar.zst

      - name: Final cleanup
        run: rm -rf ${{ github.workspace }}/*

  bump-version:
    name: Automatic Release Bump
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract pkgver & compute pkgrel
        id: bump
        run: |
          pkgver=$(grep '^pkgver=' PKGBUILD | cut -d= -f2)
          old_pkgver=$(git show HEAD~1:PKGBUILD | grep '^pkgver=' | cut -d= -f2 2>/dev/null || echo "")
          if [ "$pkgver" != "$old_pkgver" ]; then
            new_rel=1
          else
            current_rel=$(grep '^pkgrel=' PKGBUILD | cut -d= -f2)
            new_rel=$((current_rel + 1))
          fi
          makepkg --printsrcinfo > .SRCINFO
          echo "::set-output name=pkgver::$pkgver"
          echo "::set-output name=pkgrel::$new_rel"

      - name: Commit & push bump
        uses: EndBug/add-and-commit@v9
        with:
          author_name: "github-actions[bot]"
          author_email: "github-actions[bot]@users.noreply.github.com"
          message: "ci: bump pkgrel to ${{ steps.bump.outputs.pkgrel }} (pkgver ${{ steps.bump.outputs.pkgver }})"
          add: |
            PKGBUILD
            .SRCINFO
          push: true

  release:
    name: Create GitHub Release
    needs: bump-version
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: kernel-build
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: Linux-custom-LTS-${{ needs.bump-version.outputs.pkgver }}-${{ needs.bump-version.outputs.pkgrel }}
          name: Linux Custom LTS ${{ needs.bump-version.outputs.pkgver }}-r${{ needs.bump-version.outputs.pkgrel }}
          body: |
            Build automatica del kernel Linux personalizzato v${{ needs.bump-version.outputs.pkgver }}-r${{ needs.bump-version.outputs.pkgrel }}.
            Installabile con `pacman -U`.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload package to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: Linux-custom-LTS-${{ needs.bump-version.outputs.pkgver }}-${{ needs.bump-version.outputs.pkgrel }}
          files: dist/*.pkg.tar.zst
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
