# .github/workflows/build.yml

name: Build & Release linux-custom-test Kernel

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *'

permissions:
  contents: write

env:
  PKGBASE: linux-custom-test

jobs:

  sync:
    name: Sync PKGBUILD to upstream v6.12.x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Fetch latest 6.12.x tag
        id: get_tag
        run: |
          latest=$(git ls-remote --tags --refs \
            https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git \
            | grep 'refs/tags/v6\.12\.[0-9]\+$' \
            | sed 's|.*/v||' \
            | sort -V | tail -1)
          echo "latest=$latest" >> $GITHUB_OUTPUT

      - name: Read current pkgver
        id: get_pkgver
        run: |
          current=$(grep '^pkgver=' PKGBUILD | cut -d= -f2)
          echo "current=$current" >> $GITHUB_OUTPUT

      - name: Bump pkgver & reset pkgrel
        if: ${{ steps.get_tag.outputs.latest != steps.get_pkgver.outputs.current }}
        run: |
          sed -i "s/^pkgver=.*/pkgver=${{ steps.get_tag.outputs.latest }}/" PKGBUILD
          sed -i "s/^pkgrel=.*/pkgrel=1/"                          PKGBUILD

      - name: Commit version bump
        if: ${{ steps.get_tag.outputs.latest != steps.get_pkgver.outputs.current }}
        uses: EndBug/add-and-commit@v9
        with:
          message: "ci: sync to Linux v${{ steps.get_tag.outputs.latest }}"
          add: PKGBUILD

  build:
    name: Build & Sign Packages
    needs: sync
    runs-on: ubuntu-latest
    container: archlinux:latest

    steps:
      - uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm \
            base-devel bc cpio gettext git libelf pahole \
            perl python tar xz pacman-contrib gnupg

      - name: Create builder user
        run: |
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          chown -R builder:builder $GITHUB_WORKSPACE

      - name: Import GPG private key
        if: ${{ secrets.GPG_PRIVATE_KEY != '' }}
        env:
          GPG_KEY:       ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg

          # loopback pinentry
          echo -e "use-agent\npinentry-mode loopback" > ~/.gnupg/gpg.conf

          # import key
          printf '%s\n' "$GPG_KEY" > private.key
          gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --import private.key
          shred -u private.key

          # trust it 
          KEYID=$(gpg --list-secret-keys --with-colons \
                   | awk -F: '/^sec:/ {print $5; exit}')
          echo "$KEYID:6:" | gpg --import-ownertrust

          gpg --list-keys

      - name: Build with makepkg (--sign)
        run: |
          sudo -u builder bash -lc "
            mkdir -p ~/build
            cp -r \$GITHUB_WORKSPACE/* ~/build/
            cd ~/build
            cp makepkg.conf ~/.makepkg.conf
            updpkgsums
            makepkg -s --noconfirm --sign
            mkdir -p \$GITHUB_WORKSPACE/artifacts
            cp *.pkg.tar.zst* \$GITHUB_WORKSPACE/artifacts/
          "

      - name: List artifacts
        run: ls -lh artifacts/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-packages
          path: artifacts/*.pkg.tar.zst*

  bump:
    name: Bump pkgrel if rebuild
    needs: build
    runs-on: ubuntu-latest
    outputs:
      pkgver: ${{ steps.calc.outputs.pkgver }}
      pkgrel: ${{ steps.calc.outputs.pkgrel }}

    steps:
      - uses: actions/checkout@v4

      - name: Compute new pkgrel
        id: calc
        run: |
          ver=$(grep '^pkgver=' PKGBUILD | cut -d= -f2)
          prev=$(git show HEAD~1:PKGBUILD \
                 | grep '^pkgver=' | cut -d= -f2 2>/dev/null || echo "")
          if [[ "$ver" != "$prev" ]]; then
            rel=1
          else
            rel=$(( $(grep '^pkgrel=' PKGBUILD | cut -d= -f2) + 1 ))
          fi
          echo "pkgver=$ver" >> $GITHUB_OUTPUT
          echo "pkgrel=$rel" >> $GITHUB_OUTPUT
          echo "$ver-$rel" > .tag

      - name: Commit bump
        uses: EndBug/add-and-commit@v9
        with:
          message: "ci: bump to ${{ needs.bump.outputs.pkgver }}-${{ needs.bump.outputs.pkgrel }}"
          add: |
            PKGBUILD
            .tag

  release:
    name: Publish GitHub Release
    needs: bump
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: kernel-packages
          path: dist

      - name: List release assets
        run: ls -lh dist/

      - name: Create & upload GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.PKGBASE }}-${{ needs.bump.outputs.pkgver }}-${{ needs.bump.outputs.pkgrel }}
          name: ${{ env.PKGBASE }} ${{ needs.bump.outputs.pkgver }}-r${{ needs.bump.outputs.pkgrel }}
          body: |
            Custom LTS kernel built with modprobed.db.
            Version: ${{ needs.bump.outputs.pkgver }}-r${{ needs.bump.outputs.pkgrel }}
            Install via pacman -U *.pkg.tar.zst
          files: dist/*.pkg.tar.zst*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
